/*
 * Copyright 2018-2020 Olaf Zimmermann (a.k.a. socadk)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

grammar io.mdsl.APIDescription with org.eclipse.xtext.common.Terminals

/*  
---
title: Microservices Domain Specific Language (MDSL) Grammar
author: Olaf Zimmermann
copyright: Olaf Zimmermann, 2018-2020. All rights reserved.
version: "3.1.0 (last update: May 26, 2020)"
---
*/ 

generate apiDescription "http://www.mdsl.io/APIDescription"

serviceSpecification hidden(WS, ML_COMMENT, SL_COMMENT): 
	'API' 'description' name=ID
	('version' svi=semanticVersioningIdentifier)?  
	('usage' 'context' reach=visibility 'for' direction+=directionList)?
	types+=dataContract*
	contracts+=endpointContract+
	slas+=SLATemplate*
	providers+=provider*
	clients+=client*
	gateways+=gateway*
	('IPA')? // IPA is the inversion of API; optional
;

visibility: 'PUBLIC_API' | 'COMMUNITY_API' | 'SOLUTION_INTERNAL_API' | STRING;

directionList:
	primaryDirection=direction ('and' otherDirection=direction)?
;

direction: 'FRONTEND_INTEGRATION' | 'BACKEND_INTEGRATION' | STRING;

// ** This MDSL grammar defines several sub-languages (orthogonal to each other): 
//
// * A) schema (data types)
// * B) service endpoints (including operations) 
// * C) instance-level concepts (provider, client; gateway)


// *** Part A: data contract/types 

dataContract:
	'data' 'type' name=ID 
	('version' svi=semanticVersioningIdentifier)? 
	structure=elementStructure
	default=defaultValue? // moved here on May 22, 2020; experimental
;


// *** Part B: service endpoint contracts (with operations)

endpointContract:
	('endpoint' | 'channel' ) 'type' name=ID
	('version' svi=semanticVersioningIdentifier)? 
	('serves' 'as' primaryRole=ResourceRole ('and' otherRoles+=ResourceRole)* 'role'?)?
	sp=securityPolicy?
	('exposes' ops+=operation+)? // optional because early incomplete specifications do not have to expose any operations 
;

semanticVersioningIdentifier: STRING; // correct format can be checked by API linters 
// semanticVersioningIdentifier: major=INT ('.' minor=INT ('.' patch=INT)?)?;

 // v3.1.0: removed experimental ones 'GATEWAY_RESOURCE' | 'COMPOSITION_RESOURCE' | 'GUARD_RESOURCE' | 'GROUND_RESOURCE'
ResourceRole: 'PROCESSING_RESOURCE' | 'INFORMATION_HOLDER_RESOURCE' | 'OPERATIONAL_DATA_HOLDER' | 'MASTER_DATA_HOLDER' | 'REFERENCE_DATA_HOLDER' | 'TRANSFER_RESOURCE' | 'LOOKUP_RESOURCE' | 'DATA_TRANSFER_RESOURCE' | 'LINK_LOOKUP_RESOURCE'  | STRING;

operation:
	('operation' | 'event' ) name=ID // 'event' is VSS 19 suggestion (experimental)
	('version' svi=semanticVersioningIdentifier)?
	('with' 'responsibility' responsibilities=operationResponsibility)? 
	('in'  mep=messageExchangePattern 'conversation')? 
	('expecting' requestMessage=dataTransferRepresentation)? // request message is optional
	('delivering' responseMessage=dataTransferRepresentation 
	  ('reporting' reportData=statusReport)? // optional within 'delivering'
	)? // response message is optional for 'operation'
	sp=securityPolicy?
;

securityPolicy: 
	'protected' 'by' 'policy'  securityObject+=elementStructure+ 
;

statusReport:
	(('error' | 'analytics') reportMessage+=elementStructure)+ 
;

operationResponsibility: 'COMPUTATION_FUNCTION' | 'STATE_CREATION_OPERATION' | 'RETRIEVAL_OPERATION' | 'STATE_TRANSITION_OPERATION' | 'EVENT_PROCESSOR' | 'BUSINESS_ACTIVITY_PROCESSOR' | STRING; // removed in v3.1.0: 'NOTIFICATION_OPERATION'

messageExchangePattern: 'ONE_WAY' | 'REQUEST_REPLY' | 'NOTIFICATION' | STRING;	
	
dataTransferRepresentation:
	('headers' headers=elementStructure)? 
	'payload' payload=elementStructure // note: this could be an embedded XSD or JSON Schema (or an external one referenced via URI)
	('structured' 'as' ts=TypeSystem)? 
;

elementStructure: 
	pf=parameterForest | pt=parameterTree | apl=atomicParameterList  | np=singleParameterNode
;

parameterForest:
	classifier=patternStereotype?
	'[' ptl=parameterTreeList ']' 
;
 
parameterTreeList:
	first=parameterTree (';' next+=parameterTree)*
;

parameterTree:
	classifier=patternStereotype? 
	(name=STRING':')?
	'{' 
	  first=treeNode ((','|'|') nexttn+=treeNode)* 
	'}' 
	card=Cardinality? 
;

treeNode:
	pn=singleParameterNode | apl=atomicParameterList | children=parameterTree
;

singleParameterNode: 
	genP=genericParameter | atomP=atomicParameter | tr=typeReference 
;

genericParameter: 
	 name=STRING // this makes it possible to only have a name/id, but no role (yet)
	| p='P' // unspecified 'Parameter' or 'PayloadPart' (could be Value/Entity, Metadata, Identifier, Link or something composed/external)
	| name=STRING ":" 'P'
;

typeReference: 
	classifier=patternStereotype? 
	(name=STRING':')? dcref=[dataContract] 
	card=Cardinality?
;

atomicParameterList:
	classifier=patternStereotype? 
	(name=STRING':')? 
	'(' first=atomicParameter ((','|'|') nextap+=atomicParameter)* ')' 
	card=Cardinality? 	
;

atomicParameter: 
	classifier=patternStereotype? 
	rat=roleAndType
	card=Cardinality?
;

roleAndType:
    (name=STRING':')? role=ParameterRole ('<'btype=BasicDataType'>')? 
;

defaultValue:
	'default' 'is' STRING // TODO tbd: do we need something more concrete here? (experimental)
;

patternStereotype:
    '<<' (pattern=MapPattern | name=ID) '>>' 
;

MapPattern:
	// updated in version 3.1.0 (May 2020):
	'API_Key' | 'Context_Representation' | 'Error_Report' | 'Request_Bundle' | 'Request_Condition' | 'Wish_List' | 'Wish_Template' 
	| 'Embedded_Entity' | 'Linked_Information_Holder' | 'Annotated_Parameter_Collection' | 'Pagination' 
	| 'Data_Element' | 'Identifier_Element' | 'Link_Element' | 'Metadata_Element'  | 'Control_Metadata' | 'Aggregated_Metadata' | 'Provenance_Metadata' 
	| STRING   
	
	
;

ParameterRole:
	  'D' // (Atomic) Data Value, Entity or Value Object from DDD
	| 'MD' // // e.g. in Annotated Parameter Collection: {MD,(MD,D),(MD,D),...}
	| 'ID' // Identifier (globally or locally unique, not network accessible
	| 'L' // e.g. URI. Linked Information Holder: {(ID,D1,..,DN,L} for HATEOAS, e.g. "nextPage":Link<Customer>* 
	| 'Data'
	| 'Metadata'
	| 'Identifier'
	| 'Link' 
	// | 'V' // DEPRECATED, removed 5/2020 (in version 3.0.0)
;

BasicDataType:
 	'bool' | 'int' | 'long' | 'double' | 'string' | 'raw' | 'void' // 'record' and 'map' and 'array' do not make sense here
	;

// actions added to get rid of warning 
Cardinality:
	{Cardinality} (('?' | '*')) // from (E)BNF, optionality expressed by '?', more powerful and shorter than 'required' flag
	| {Cardinality} '+' | {Cardinality} '!' // "!" means required, exactly one (default if not specified)
;

TypeSystem: 
	'MAP_TYPE' | 'JOLIE_TYPE' | 'JSON_SCHEMA' | 'XML_SCHEMA' |'PROTOCOL_BUFFER' | 'AVRO_SCHEMA' | 'THRIFT_TYPE' | 'GRAPHQL_SDL' | 'OTHER' 
;


// *** C.1: provider/endpoint part 

providerReferenceList:
	first=[provider] (',' next+=[provider])* 
;


provider:
	(ap= 'API' 'provider' | ms= 'Message' 'sender')
	name=ID
	('contained' 'in' parent=[provider])? // subresource (OAS has this) 
	epl+=endpointList+
	('under' 'conditions' tsandcs=STRING | 'with' 'provider' sla=SLA)? // neither Ts&Cs nor SLA must be present
	('provider' 'governance'  evolStrat=EvolutionStrategy)? 
;

endpointList:	
	( 'offers' | 'publishes' ) contract=[endpointContract] // one endpoint can only offer a single contract (but provider can have multiple endpoints)
	endpoints+=endpointInstance* // optional; several endpoints per contract mean redundant deployment (or different SLAs for same functionality) 
;

endpointInstance: 
	('at' 'endpoint' 'location' | 'via' 'channel' ) name=STRING
	pb=protocolBinding?
	('with' 'endpoint' sla=SLA)? // SLA is optional
	('endpoint' 'governance'  evolStrat=EvolutionStrategy)?
;

protocolBinding:
	'via' 'protocol' bindings+=transportProtocol ('mapping' ms+=parameterBinding)*
;

transportProtocol:
	// TODO add parameter mapping info to RESTful_HTTP binding; default body, but path and query also supported (APs only)
	'RESTful_HTTP'| 'SOAP_HTTP' | 'gRPC' |  'Avro_RPC' | 'Thrift' | 'AMQP' | 'JMS_ActiveMQ' |  'STOMP' | 'Kafka' | 'MQTT' | STRING 
;

// action added to get rid of warning (Eclipse quick fix)
parameterBinding:
	('path' 'parameters' pp=identifierList)
	| ('query' 'parameters' qp=identifierList)
	| ('form' 'parameters' fp=identifierList)
	| {parameterBinding} 'default' 'body'
;

identifierList:
	'(' name1=ID (',' moreNames+=ID )* ')'
;

SLA:
	'SLA' (builtin=internalSLA | external=[SLATemplate])
;

SLATemplate:
	'SLA' 'template'
	name=ID
	slas+=internalSLA
;

internalSLA:
	('type' type=SLAType)? // note: not checked/used at present (leads to a semantic check) 
	slos+=SLO+
	('penalty' penalties=STRING)?
	('notification' reporting=STRING)?
	rp=RatePlan? 
	rl+=RateLimit*
;

RatePlan:
	'rate' 'plan' ('FREEMIUM' | "SUBSCRIPTION" | "USAGE_BASED") // note: actual pricing not modeled yet
;

RateLimit:
	'rate' 'limit' (none='NONE' | "MAX_CALLS" callRate=simpleMeasurement | "DATA_QUOTA" dataRate=simpleMeasurement) "within" interval=simpleMeasurement// note: just a PoC/demo, can be modeled much better (see pattern/books)	
;

enum SLAType : NONE  | IMPLICIT | INFORMAL | QUALITATIVE | QUANTITATIVE
;

SLO:
	'objective' 
    name=ID
	qualityGoal=STRING
	// ':'  
	measurement=measurement
;

measurement:
	sm=simpleMeasurement | lz=landingZone
;

simpleMeasurement:
	value=INT
	unitOfMeasure=('hours' | 'minutes' | 'seconds' | 'MB' | 'GB'| ID | STRING)? // not a full specification of units/measures, just a PoC/demo
;

landingZone:
	'minimal' s=simpleMeasurement
	'target' t=simpleMeasurement
	('optimal' o=simpleMeasurement)?
;


enum EvolutionStrategy: 
	ETERNAL_LIFETIME | LIMITED_GUARANTEED_LIFETIME | TWO_IN_PRODUCTION | AGGRESSIVE_OBSOLESCENCE | EXPERIMENTAL_PREVIEW // MAPs
	| OTHER_STRATEGY /* replaced OTHER (for antlr4) */ | UNDISCLOSED
;


// *** C.2: Client 

client:
	(ac='API' 'client' | mr='Message' 'receiver') 
	name=ID
     cons+=consumption+
;

consumption: 
	('consumes'|'subscribes') contract=[endpointContract]
	// if present, the provider reference creates a static binding between client and server:
	('from' providerReference=[provider] | 'through' gatewayReference=[gateway])? // could also go down to endpoint level
	('via' 'protocol'  binding+=transportProtocol)? // must match provider-side information
;

// *** C.3: Gateway (experimental)

gateway:
	('API' 'gateway' | 'Message' 'broker') name=ID
	gateList+=gate+
	('evolution' 'governance'  evolStrat=EvolutionStrategy)?
;

gate:
	( 'offers' | 'publishes' )  upstreamContract+=[endpointContract]+
	endpoints+=endpointInstance+ 

     cons+=consumption
     ('mediates' dts+=dataTransformation)*
;

dataTransformation:
	'from' indc=[dataContract] 'to' outdc=[dataContract]
;

// ** End of MDSL grammar 
