/*
 * Copyright 2020 The MDSL Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.mdsl.generator.model;

import java.util.List;

import com.google.common.collect.Lists;

/**
 * The root class of the MDSL generator model. This model shall ease the
 * implementation of generators as the AST model generated by Xtext is quite
 * extensive and at some points not easy to process.
 */
public class MDSLGeneratorModel {

	private String apiName;
	private List<DataType> dataTypes;
	private List<EndpointContract> endpoints;
	private List<Provider> providers;
	private List<Client> clients;
	private List<ProviderImplementation> providerImplementations;

	/**
	 * Creates a new MDSL generator model.
	 * 
	 * @param apiName the name of the modelled API
	 */
	public MDSLGeneratorModel(String apiName) {
		this.apiName = apiName;
		this.dataTypes = Lists.newLinkedList();
		this.endpoints = Lists.newLinkedList();
		this.providers = Lists.newLinkedList();
		this.clients = Lists.newLinkedList();
		this.providerImplementations = Lists.newLinkedList();
	}

	/**
	 * Returns the name of the MDSL API model.
	 * 
	 * @return the name of the API model
	 */
	public String getApiName() {
		return apiName;
	}

	/**
	 * Returns a list of all data types modeled in the MDSL file.
	 * 
	 * @return a list of all data types of the MDSL model
	 */
	public List<DataType> getDataTypes() {
		return Lists.newLinkedList(dataTypes);
	}

	/**
	 * Returns a list with all endpoints of the represented MDSL API.
	 * 
	 * @return a list with all endpoints of the MDSL API
	 */
	public List<EndpointContract> getEndpoints() {
		return Lists.newLinkedList(endpoints);
	}

	/**
	 * Returns a list with all providers of the represented MDSL API.
	 * 
	 * @return a list of all providers of the MDSL API
	 */
	public List<Provider> getProviders() {
		return Lists.newLinkedList(providers);
	}

	/**
	 * Returns a list with all clients of the represented MDSL API.
	 * 
	 * @return a list of all clients of the MDSL API
	 */
	public List<Client> getClients() {
		return Lists.newLinkedList(clients);
	}

	/**
	 * Returns a list with all provider implementations of the represented MDSL API.
	 * 
	 * @return a list of all provider implementations of the MDSL API
	 */
	public List<ProviderImplementation> getProviderImplementations() {
		return Lists.newLinkedList(providerImplementations);
	}

	/**
	 * Adds a new data type to the generator model.
	 * 
	 * @param dataType the new data type that shall be added to the generator model
	 */
	public void addDataType(DataType dataType) {
		this.dataTypes.add(dataType);
	}

	/**
	 * Adds a new endpoint to the generator model.
	 * 
	 * @param endpoint the new endpoint that shall be added to the generator model
	 */
	public void addEndpoint(EndpointContract endpoint) {
		this.endpoints.add(endpoint);
	}

	/**
	 * Adds a new provider to the generator model.
	 * 
	 * @param provider the new provider that shall be added to the generator model
	 */
	public void addProvider(Provider provider) {
		this.providers.add(provider);
	}

	/**
	 * Adds a new client to the generator model.
	 * 
	 * @param client the new client that shall be added to the generator model
	 */
	public void addClient(Client client) {
		this.clients.add(client);
	}

	/**
	 * Adds a new provider implementation to the generator model.
	 * 
	 * @param providerImplementation the new provider implementation that shall be
	 *                               added to the generator model
	 */
	public void addProviderImplementation(ProviderImplementation providerImplementation) {
		this.providerImplementations.add(providerImplementation);
	}

}
