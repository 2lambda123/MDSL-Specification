/*
// optional within 'delivering' * generated by Xtext 2.20.0
 */
package io.mdsl.validation;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.validation.EValidatorRegistrar;

import io.mdsl.apiDescription.ApiDescriptionPackage;
import io.mdsl.apiDescription.EndpointContract;
import io.mdsl.apiDescription.ServiceSpecification;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class EndpointContractValidator extends AbstractMDSLValidator {
	
	public final static String HTTP_RESOURCE_BINDING_REQUIRED = "HTTP_RESOURCE_BINDING_REQUIRED";
	
	@Override
	public void register(EValidatorRegistrar registrar) {
		// not needed for classes used as ComposedCheck
	}
	
	/*// disabled this one
	@Check
	public void apiLinterWelcome(final ServiceSpecification specRoot) {
		info("MDSL API Linter activated, checking semantic rules in " + specRoot.getName(), specRoot, ApiDescriptionPackage.eINSTANCE.getServiceSpecification_Name()); // Literals.SERVICE_SPECIFICATION__NAME);
	 */
	
	@Check
	public void reportContractSize(EndpointContract epc) {
		int opsInContract = epc.getOps().size();
		
		if(opsInContract>5) {
			// TODO offer QF in other cases too 
			warning(epc.getName() + " exposes " + opsInContract + " operation(s), more than a single HTTP resource supports in its unified method/verb interface. Split the endpoint type into multiple resources in an HTTP binding before mapping to OpenAPI.", epc, ApiDescriptionPackage.eINSTANCE.getEndpointContract_Name(), HTTP_RESOURCE_BINDING_REQUIRED); // Literals.ENDPOINT_CONTRACT__NAME);		
		}
		else {
			info(epc.getName() + " exposes " + opsInContract + " operation(s)", epc, ApiDescriptionPackage.eINSTANCE.getEndpointContract_Name()); // Literals.ENDPOINT_CONTRACT__NAME);
		}
	}
}
