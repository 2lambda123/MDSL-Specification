/*
// optional within 'delivering' * generated by Xtext 2.20.0
 */
package io.mdsl.validation;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.EValidatorRegistrar;

import io.mdsl.apiDescription.ApiDescriptionPackage;
import io.mdsl.apiDescription.CommandInvokationStep;
import io.mdsl.apiDescription.DomainEventProductionStep;
import io.mdsl.apiDescription.EitherCommandOrOperation;
import io.mdsl.apiDescription.EitherCommandOrOperationInvokation;
import io.mdsl.apiDescription.EndpointContract;
import io.mdsl.apiDescription.FlowStep;
import io.mdsl.apiDescription.Orchestration;
import io.mdsl.apiDescription.ServiceSpecification;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class FlowValidator extends AbstractMDSLValidator {

	public final static String FLOW_FOUND = "FLOW_FOUND";
	public final static String FLOW_CIS_STEP_FOUND = "FLOW_CIS_STEP_FOUND";
	public final static String FLOW_DEP_STEP_FOUND = "FLOW_DEP_STEP_FOUND";
	public static final String COMMAND_FOUND = "COMMAND_FOUND";
	
	@Override
	public void register(EValidatorRegistrar registrar) {
		// not needed for classes used as ComposedCheck
	}
	
	// TODO (M) check whether bindings exist already (or whether flow is supported by endpoint already)
	
	@Check
	public void analyzeFlow(Orchestration flow) {;
		if(flow.getName()!=null) 
			info("This flow should be supported by an endpoint type.", flow, ApiDescriptionPackage.eINSTANCE.getOrchestration_Name(), FLOW_FOUND); 
	}
	
	/*
	@Check
	public void analyzeFlowStep(FlowStep eventOrCommand) {
		// TODO WIP (quite a few rules and cases to be processed for full solution, for instance bindings)
	}
	*/
	
	@Check
	public void reportCommand(EitherCommandOrOperation cmd) {
		info("This command could be backed by an endpoint operation.", cmd, ApiDescriptionPackage.eINSTANCE.getEitherCommandOrOperation_Command(), COMMAND_FOUND); 
	}
	
	@Check
	public void reportCommand(EitherCommandOrOperationInvokation cmd) {
		info("This command could be backed by an endpoint operation.", cmd, ApiDescriptionPackage.eINSTANCE.getEitherCommandOrOperationInvokation_Ci(), COMMAND_FOUND); 
	}
	
	@Check
	public void analyzeDepStep(DomainEventProductionStep dep) {
		if(dep!=null && dep.getEventProduction()!=null) 
			info("This domain event production event step should be backed by an endpoint operation.", dep, ApiDescriptionPackage.eINSTANCE.getDomainEventProductionStep_EventProduction(), FLOW_DEP_STEP_FOUND); 
	}
	
	@Check
	public void analyzeCisStep(CommandInvokationStep cis) { 
		if(cis!=null && cis.getAction()!=null) 
			info("This command invocation step could be backed by an endpoint operation.", cis, ApiDescriptionPackage.eINSTANCE.getCommandInvokationStep_Action(), FLOW_CIS_STEP_FOUND); 
	}

}