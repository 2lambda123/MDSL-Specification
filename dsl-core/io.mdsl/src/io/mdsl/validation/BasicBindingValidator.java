/*
 * generated by Xtext 2.20.0
 */
package io.mdsl.validation;

import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.EValidatorRegistrar;

import io.mdsl.apiDescription.ApiDescriptionPackage;
import io.mdsl.apiDescription.EndpointInstance;
import io.mdsl.apiDescription.EndpointList;
import io.mdsl.apiDescription.HTTPBinding;
import io.mdsl.apiDescription.JavaBinding;
import io.mdsl.apiDescription.ProtocolBinding;
import io.mdsl.apiDescription.Provider;
import io.mdsl.apiDescription.ServiceSpecification;
import io.mdsl.apiDescription.TechnologyBinding;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class BasicBindingValidator extends AbstractMDSLValidator {

	private static final String JAVA_BINDING_PACKAGE_REGEX = "^[a-z][a-z0-9_]*(\\.[a-z0-9_]+)*";

	@Override
	public void register(EValidatorRegistrar registrar) {
		// not needed for classes used as ComposedCheck
	}

	// @Check
	public void bindingExistenceValidator(final ServiceSpecification specRoot) {
		info("MDSL API Linter: only checking very few binding-related rules in " + specRoot.getName() + " in current version", specRoot,
				ApiDescriptionPackage.eINSTANCE.getServiceSpecification_Name());
				// ApiDescriptionPackage.Literals.SERVICE_SPECIFICATION__NAME);

		// * gRPC: tbd (and no bindings exist for Jolie and GraphQL)

		List<Provider> providers = specRoot.getProviders().stream().filter(p -> p instanceof Provider).map(p -> (Provider) p).collect(Collectors.toList());

		for (Provider provider : providers) {
			EList<EndpointList> endpointListInProvider = provider.getEpl();
			// TODO grammar has 2x list, could be simplified
			for (EndpointList endpointList : endpointListInProvider) {
				EList<EndpointInstance> endpoints = endpointList.getEndpoints();
				for (EndpointInstance endpoint : endpoints) {
					EList<TechnologyBinding> techBindings = endpoint.getPb();
					for (int i = 0; i < techBindings.size(); i++) {
						TechnologyBinding techBinding = techBindings.get(i);
						ProtocolBinding protBinding = techBinding.getProtBinding();
						if (protBinding.getHttp() != null) {
							checkHTTPBinding(specRoot, provider.getName(), endpoint.getName(), protBinding.getHttp());
						} else if (protBinding.getJava() != null) {
							checkJavaBinding(specRoot, provider.getName(), endpoint.getName(), protBinding.getJava());
						} else if (protBinding.getGrpc() != null) {
							; // info("Specification includes a provider endpoint binding of type gRPC", protBinding, ApiDescriptionPackage.eINSTANCE.getProtocolBinding_Grpc()); // // Literals.PROTOCOL_BINDING__GRPC);
						} else if (protBinding.getOther() != null) {
							// TODO get value of "other" (utility method)
							info("Specification includes a provider endpoint binding of other type " /* + protBinding.getOther().toString() */, protBinding,
									ApiDescriptionPackage.eINSTANCE.getProtocolBinding_Other()); // Literals.PROTOCOL_BINDING__OTHER);
						} else
							throw new IllegalArgumentException("Unknown binding type."); // can't get here
					}
				}
			}
		}
	}

	private void checkJavaBinding(ServiceSpecification specRoot, String pName, String address, JavaBinding java) {
		// info("Specification " + specRoot.getName() + " includes a provider " + pName + " with endpoint binding of type Java, location is " + address, java,
		//		ApiDescriptionPackage.eINSTANCE.getJavaBinding_Java()); // Literals.JAVA_BINDING__JAVA);
		
		if (java.getPackage() != null && !java.getPackage().matches(JAVA_BINDING_PACKAGE_REGEX))
			error("The string '" + java.getPackage()
					+ "' does not represent a proper Java package name. Please provide a correctly formatted Java package name (like 'io.mdsl.validator').", java,
					ApiDescriptionPackage.eINSTANCE.getJavaBinding_Package()); // Literals.JAVA_BINDING__PACKAGE);
		// TODO check class name? 
	}

	private void checkHTTPBinding(ServiceSpecification specRoot, String pName, String address, HTTPBinding http) {
		// info("Specification " + specRoot.getName() + " includes a provider " + pName + " with endpoint binding of type HTTP, location is " + address, http,
		//		ApiDescriptionPackage.eINSTANCE.getHTTPBinding_Http()); // Literals.HTTP_BINDING__HTTP);
	}
}
